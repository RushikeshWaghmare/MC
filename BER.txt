import numpy as np
from scipy.special import erfc
import matplotlib.pyplot as plt

N = int(1e6)
SNR = np.arange(-3, 60)
ip = np.random.rand(N) > 0.5
s = 2*ip - 1

nErr = np.zeros(len(SNR))
for i, Eb_N0 in enumerate(SNR):
  n = np.sqrt(0.5) * (np.random.rand(N) + 1j*np.random.rand(N))
  h = np.sqrt(0.5) * (np.random.rand(N) + 1j*np.random.rand(N))
  y = h*s + np.sqrt(10**(-Eb_N0/10))*n
  ipHat = (np.real(y/h) > 0).astype(int)
  nErr[i] = np.sum(ip != ipHat)
  simBer = nErr / N
  theoryBerAWGN = 0.5*erfc(np.sqrt(10**(SNR/10)))
  theoryBer = 0.5*(1 - np.sqrt(10**(SNR/10)/(1 + 10**(SNR/10))))

plt.semilogy(SNR, theoryBerAWGN, 'cd-',linewidth=2)
plt.semilogy(SNR, theoryBer, 'bp-', linewidth=2)
plt.semilogy(SNR, simBer, 'mx-', linewidth=2)
plt.axis([3, 35, 1e-5, 0.5])
plt.grid(True, which="both")
plt.legend(['AWGN-Theory', 'Rayleigh-Theory', 'Rayleigh-Simulation'])
plt.legend(['Rayleigh-Theory', 'Rayleigh-Simulation'])
plt.xlabel('Eb/No, db')
plt.ylabel('Bit Error Rate')
plt.title('BER for BPSK modulation in Rayleigh channel')
plt.show()